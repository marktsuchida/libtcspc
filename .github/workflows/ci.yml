# This file is part of libtcspc
# Copyright 2019-2024 Board of Regents of the University of Wisconsin System
# SPDX-License-Identifier: MIT

name: CI

on:
  push: # All branches during early development.

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - uses: pre-commit/action@v3.0.1

  cpp-test:
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-22.04
          - ubuntu-24.04
          - windows-2022
          - macos-13  # x86_64
          - macos-14  # arm64
        compiler:
          - platform
          - clang
        exclude:
          - runner: macos-13
            compiler: clang  # Redundant with platform
          - runner: macos-14
            compiler: clang  # Redundant with platform
        include:
          - runner: ubuntu-22.04
            compiler: platform
            cxx: g++
            # TSan appears to have false positives in this configuration.
            sanitizers: address,undefined
            asan_opts: detect_leaks=1
          - runner: ubuntu-22.04
            compiler: clang
            cxx: clang++
            sanitizers: a+ub,thread
            asan_opts: detect_leaks=1
          - runner: ubuntu-24.04
            compiler: platform
            cxx: g++
            # I seem to get strage errors if ASan and UBSan are used together.
            sanitizers: address,undefined,thread
            asan_opts: detect_leaks=1
          - runner: ubuntu-24.04
            compiler: clang
            cxx: clang++
            sanitizers: a+ub,thread
            asan_opts: detect_leaks=1
          - runner: windows-2022
            compiler: platform
            cxx: cl
            opts: -Dcatch2:werror=false
            sanitizers: address
          - runner: windows-2022
            compiler: clang
            cxx: clang-cl
            opts: -Dcatch2:werror=false -Dgoogle-benchmark:werror=false
          - runner: windows-2022
            # Use /Z7 to be ccache-friendly (/Zi is not); no python3x_d.dll.
            debug_opts: -Dcpp_args=/Z7 -Dtests_python=disabled
          - runner: macos-13
            cxx: clang++
            sanitizers: a+ub,thread
          - runner: macos-14
            cxx: clang++
            sanitizers: a+ub,thread
    name: cpp-test-${{ matrix.runner }}-${{ matrix.cxx }}
    runs-on: ${{ matrix.runner }}
    env:
      CXX: ${{ matrix.cxx }}
      ASAN_OPTIONS: ${{ matrix.asan_opts }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache-cache
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: install tools
        run: python -m pip install --upgrade pip meson ninja
      - uses: ilammy/msvc-dev-cmd@v1

      - name: cache ccache cache
        uses: actions/cache@v4
        with:
          # Currently there is no way to update the cache when hit
          # (https://github.com/actions/toolkit/issues/505). Instead, use
          # unique keys and restore from most recent.
          key: ccache-${{ matrix.runner }}-${{ matrix.cxx }}-${{ github.sha }}
          restore-keys: ccache-${{ matrix.runner }}-${{ matrix.cxx }}-
          path: ${{ github.workspace }}/.ccache-cache
      - name: install ccache (Ubuntu)
        if: startsWith(matrix.runner, 'ubuntu-')
        run: |
          sudo apt-get install ccache
          ccache -z
          echo "CXX=ccache $CXX" >$GITHUB_ENV
      - name: install ccache (macOS)
        if: startsWith(matrix.runner, 'macos-')
        run: |
          brew install ccache
          ccache -z
          echo "CXX=ccache $CXX" >$GITHUB_ENV
      - name: install ccache (Windows)
        if: startsWith(matrix.runner, 'windows-')
        # Install ccache under the name cl.exe or clang-cl.exe and point to it
        # via CXX (see ccache MSVC instructions).
        run: |
          $version = "4.10"
          $url = "https://github.com/ccache/ccache/releases/download/v$version/ccache-$version-windows-x86_64.zip"
          $tempdir = Join-Path $([System.IO.Path]::GetTempPath()) $(New-Guid)
          $zip = Join-Path $tempdir ccache.zip
          $dist = Join-Path $tempdir ccache
          $exe = Join-Path $dist "ccache-$version-windows-x86_64\ccache.exe"
          New-Item -Type Directory -Path $tempdir | Out-Null
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $dist
          New-Item -ItemType Directory -Name ccache | Out-Null
          Copy-Item $exe -Destination ".\ccache\"
          Copy-Item $exe -Destination ".\ccache\$Env:CXX.exe"
          "CXX=$PWD\ccache\$Env:CXX" | Out-File -FilePath $Env:GITHUB_ENV
          .\ccache\ccache -z
      - name: record start time
        shell: bash
        run: date +%s >.start-time

      - name: configure release build
        run: >
          meson setup build-release --buildtype=release ${{ matrix.opts }}
          -Dgoogle-benchmark:tests=disabled -Dcatch2:tests=false
          -Dabridge_benchmarks=true
      - name: test release build
        run: meson test -C build-release -v

      - name: configure with ASan+UBSan
        if: contains(matrix.sanitizers, 'a+ub')
        run: >
          meson setup build-asan-ubsan --buildtype=debug ${{ matrix.opts }}
          ${{ matrix.debug_opts }} -Dbenchmarks=disabled -Dcatch2:tests=false
          -Db_lundef=false -Db_sanitize=address,undefined
      - name: test with ASan+UBSan
        if: contains(matrix.sanitizers, 'a+ub')
        run: meson test -C build-asan-ubsan -v

      - name: configure with ASan
        if: contains(matrix.sanitizers, 'address')
        # With MSVC, vector/string annotations for ASan fail due to mismatch
        # between Catch2 and libtcspc. Disable these for now.
        run: >
          meson setup build-asan --buildtype=debug ${{ matrix.opts }}
          ${{ matrix.debug_opts }} -Dbenchmarks=disabled -Dcatch2:tests=false
          -Db_lundef=false -Db_sanitize=address
          -Dcpp_args='-D_DISABLE_VECTOR_ANNOTATION -D_DISABLE_STRING_ANNOTATION'
      - name: test with ASan
        if: contains(matrix.sanitizers, 'address')
        run: meson test -C build-asan -v

      - name: configure with UBSan
        if: contains(matrix.sanitizers, 'undefined')
        run: >
          meson setup build-ubsan --buildtype=debug ${{ matrix.opts }}
          ${{ matrix.debug_opts }} -Dbenchmarks=disabled -Dcatch2:tests=false
          -Db_lundef=false -Db_sanitize=undefined
      - name: test with UBSan
        if: contains(matrix.sanitizers, 'undefined')
        run: meson test -C build-ubsan -v

      - name: configure with TSan
        if: contains(matrix.sanitizers, 'thread')
        run: >
          meson setup build-tsan --buildtype=debug ${{ matrix.opts }}
          ${{ matrix.debug_opts }} -Dbenchmarks=disabled -Dcatch2:tests=false
          -Db_lundef=false -Db_sanitize=thread
      - name: test with TSan
        if: contains(matrix.sanitizers, 'thread')
        run: meson test -C build-tsan -v

      # Note: Memory Sanitizer has false positives unless libc++ is
      # instrumented; skip for now.

      - name: configure debug build
        run: >
          meson setup build-debug --buildtype=debug ${{ matrix.opts }}
          ${{ matrix.debug_opts }} -Dbenchmarks=disabled -Dcatch2:tests=false
      - name: test debug build
        run: meson test -C build-debug -v

      - name: configure C++20 build
        run: >
          meson setup build-cpp20 --buildtype=release ${{ matrix.opts }}
          -Dcpp_std=c++20
          -Dgoogle-benchmark:tests=disabled -Dcatch2:tests=false
      - name: test C++20 build
        run: meson test -C build-cpp20 -v

      - name: exercise benchmarks
        run: ninja -C build-release benchmark

      - name: ccache cleanup and stats
        shell: bash
        run: |
          PATH="$PWD/ccache:$PATH"
          elapsed=$(($(date +%s) - $(<.start-time) + 10))s
          ccache --evict-older-than $elapsed
          ccache -sv

  cpp-analyze:
    runs-on: ubuntu-24.04
    env:
      CXX: clang++
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: install tools
        run: python -m pip install --upgrade pip meson ninja

      - run: clang-tidy --version

      - name: configure build
        run: meson setup builddir --buildtype=release

      - name: clang-tidy
        run: ninja -C builddir clang-tidy

  py-test:
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
          - windows-latest
          - macos-13  # x86_64 only
        cpp_std:
          - '20'
        # https://github.com/wlav/cppyy/issues/208#issuecomment-1928461467
        exclude:
          - runner: windows-latest
            cpp_std: '20'
        include:
          - runner: windows-latest
            cpp_std: '17'
    name: py-test-${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    env:
      STDCXX: ${{ matrix.cpp_std }}
    steps:
      - run: uname -m
        if: ${{ ! startsWith(matrix.runner, 'windows-') }}

      - uses: actions/checkout@v4
      - uses: fjwillemsen/setup-nox2@v3.0.0
      - uses: ilammy/msvc-dev-cmd@v1

      - run: nox -s 'test-3.10(numpy2=False)'
      - run: nox -s 'test-3.10(numpy2=True)'
      - run: nox -s 'test-3.11(numpy2=True)'
      - run: nox -s 'test-3.12(numpy2=True)'
