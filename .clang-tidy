# This file is part of libtcspc
# Copyright 2019-2024 Board of Regents of the University of Wisconsin System
# SPDX-License-Identifier: MIT

---
WarningsAsErrors: '*'

Checks: >-
    -*,
    bugprone-*,
    cert-*,
    clang-analyzer-core.*,
    clang-analyzer-cplusplus.*,
    clang-analyzer-deadcode.*,
    clang-analyzer-nullability.*,
    clang-analyzer-optin.core.*,
    clang-analyzer-optin.cplusplus.*,
    clang-analyzer-optin.performance.*,
    clang-analyzer-optin.portability.*,
    clang-analyzer-security.*,
    clang-analyzer-unix.*,
    clang-diagnostic-*,
    concurrency-*,
    cppcoreguidelines-*,
    hicpp-signed-bitwise,
    misc-*,
    modernize-*,
    performance-*,
    portability-*,
    readability-*,
    -cert-dcl16-c,
    -cert-dcl37-c,-cert-dcl51-cpp,
    -cert-fio38-c,
    -cert-msc32-c,-cert-msc51-cpp,
    -clang-analyzer-optin.core.EnumCastOutOfRange,
    -cppcoreguidelines-avoid-c-arrays,
    -cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers,
    -misc-use-anonymous-namespace,
    -modernize-deprecated-ios-base-aliases,
    -performance-enum-size,
    -readability-identifier-length,

# Reasons for disabled checks:
# [cert-dcl16-c]
#   Alias of readability-uppercase-literal-suffix and slow.
# [cert-dcl37-c,cert-dcl51-cpp]
#   Aliases of bugprone-reserved-identifier and slow.
# [cert-fio38-c]
#   Alias of misc-non-copyable-objects and slow.
# [cert-msc32-c,cert-msc51-cpp] "properly seed PRNG"
#   Not relevant to this library; in fact we want reproducible random numbers.
# [clang-analyzer-optin.core.EnumCastOutOfRange]
#   False positives for bit-field enums.
# [cppcoreguidelines-avoid-c-arrays]
#   Alias of modernize-avoid-c-arrays and slow.
# [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
#   Too many false positives from bit manipulation code where defining
#   constants would be merely circuitous; and tests.
# [misc-use-anonymous-namespace]
#   Too much noise from Catch2 and no way to selectively disable.
# [modernize-replace-auto-ptr]
#   Slow, and compiler should detect in C++17.
# [performance-enum-size]
#   Currently no performance benefit expected given our enum usage.
# [readability-identifier-length]
#   TBD

CheckOptions:
  cppcoreguidelines-avoid-do-while.IgnoreMacros: true
  cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor: true
  hicpp-signed-bitwise.IgnorePositiveIntegerLiterals: true
  misc-include-cleaner.IgnoreHeaders: 'catch2/.*;.*/trompeloeil.hpp;.*/Python.h'
  misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic: true
  readability-braces-around-statements.ShortStatementLines: 3
  readability-function-cognitive-complexity.IgnoreMacros: true
  readability-uppercase-literal-suffix.NewSuffixes: L;uL;LL;uLL
...
